<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context=".MainActivity">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal">

        <Button
            android:id="@+id/btn_loading"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="正在加载"
            android:textSize="12dp" />

        <Button
            android:id="@+id/btn_badNet"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="网络错误"
            android:textSize="12dp" />

        <Button
            android:id="@+id/btn_errorData"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="数据错误"
            android:textSize="12dp" />

        <Button
            android:id="@+id/btn_emptyData"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="没有数据"
            android:textSize="12dp" />

        <Button
            android:id="@+id/btn_success"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="加载完成"
            android:textSize="12dp" />

    </LinearLayout>

    <com.kongzue.holderview.HolderView
        android:id="@+id/holdView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:emptyText="没啥可看的啊"
        app:errorText="服务器炸啦！"
        app:badNetText="你家网线被猫抓掉啦！"
        app:retryButtonText="再试一次"
        app:badNetResId="@mipmap/img_error_net"
        app:emptyImageResId="@mipmap/img_empty_data"
        app:errorImageResId="@mipmap/img_error_data"
        app:retryButtonVisibility="true">

        <ScrollView
            android:layout_width="match_parent"
            android:layout_height="match_parent">

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:padding="15dp"
                android:orientation="vertical">

                <TextView
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:textSize="20dp"
                    android:textColor="#000"
                    android:text="Kongzue Dialog V3(内容演示)"/>

                <TextView
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:textSize="14dp"
                    android:textColor="#000"
                    android:layout_marginTop="5dp"
                    android:text="献给要求安卓照着苹果设计稿做开发的产品们（手动滑稽"/>

                <ImageView
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:adjustViewBounds="true"
                    android:scaleType="fitXY"
                    android:layout_marginTop="5dp"
                    android:src="@mipmap/img_dialog_v3"/>

                <TextView
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:textSize="16dp"
                    android:textColor="#000"
                    android:layout_marginTop="5dp"
                    android:textStyle="bold"
                    android:text="Kongzue Dialog V3 的优势"/>

                               <TextView
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:textSize="14dp"
                    android:textColor="#000"
                    android:layout_marginTop="5dp"
                    android:textStyle="bold"
                    android:text="1，不会发生 WindowLeaked 错误"/>

                <TextView
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:textSize="14dp"
                    android:textColor="#000"
                    android:layout_marginTop="5dp"
                    android:text="一般情况下直接创建的 Dialog 或 AlertDialog 启动后，一旦其依赖的 Activity 优先于 Dialog 关闭，则会抛出 android.view.WindowLeaked 错误。\n\n这对于普通对话框还好处理，只需要在 Activity 的 onPause() 或 onDestroy() 中对 dialog.dismiss(); 但对于可能出现的，诸如等待提示框、提醒框等 Dialog，很容易发生此问题。\n\nGoogle 现已推荐使用 DialogFragment 来代替普通 Dialog 使用。\n\nKongzue Dialog 组件 V3 全部采用 DialogFragment 来实现对话框组件，且创造对话框更为简单方便，只需简单配置即可上手，也不会出现 WindowLeaked 错误。"/>

                <TextView
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:textSize="14dp"
                    android:textColor="#000"
                    android:layout_marginTop="5dp"
                    android:textStyle="bold"
                    android:text="2，横竖屏切换、分屏大小切换、甚至未来的折叠屏，都没有问题！"/>

                <TextView
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:textSize="14dp"
                    android:textColor="#000"
                    android:layout_marginTop="5dp"
                    android:text="已知 Android 系统在发生横竖屏切换、分屏大小切换、未来的折叠屏、窗口化等界面大小发生变化的情况时若不进行处理一般都会销毁当前 Activity 重新创建，但这会导致我们已经弹出的 Dialog 也发生重启。\n\n重启最大的麻烦在于需要对重启后的 Dialog 进行原状态恢复，即事件重绑定，包括 Dialog 的样式、相关事件监听器等都需要重新设置，使用 Kongzue Dialog V3 您就不需要再担心这些麻烦的问题，Kongzue Dialog V3 会自动重建被销毁的 Dialog，而无需您做任何处理。"/>

                <TextView
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:textSize="14dp"
                    android:textColor="#000"
                    android:layout_marginTop="5dp"
                    android:textStyle="bold"
                    android:text="3，目前市面上最像 iOS 风格的对话框组件"/>

                <TextView
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:textSize="14dp"
                    android:textColor="#000"
                    android:layout_marginTop="5dp"
                    android:text="Kongzue Dialog V3 依然会像第二代一样提供多种主题风格选择，且更为强大，iOS 风格自带高斯模糊让您再也无需担心产品经理和设计师放飞自我。\n\n功能强大且真正的实时高斯模糊效果让您的程序更具逼格，同时我们也比苹果更早提供了 iOS 风格对话框夜间模式，若您正在使用暗色的程序设计，这款与您更搭！\n\n我们的组件也会提供许许多多的接口供您自定义对话框的每一点细节，方便而快捷，迅速构建您的程序。"/>

                <TextView
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:textSize="14dp"
                    android:textColor="#000"
                    android:layout_marginTop="5dp"
                    android:textStyle="bold"
                    android:text="4，模态化、快速创建"/>

                <TextView
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:textSize="14dp"
                    android:textColor="#000"
                    android:layout_marginTop="5dp"
                    android:text="Kongzue Dialog V3 默认即支持模态化窗口模式，即即便从代码一次执行显示多个对话框，实际也会再上一个对话框消失后再显示下一个，以避免对话框叠加造成的混乱情况发生。\n\n另外 Kongzue Dialog 不强制您必须使用 Builder 等方式创建，且为了避免额外的代码量，所有组件均提供了可灵活使用的 show(...) 构造方法，因此只需要输入组件名称，按一下 “.” 按键，即可快速根据提示创建出一个对话框。"/>

            </LinearLayout>

        </ScrollView>

    </com.kongzue.holderview.HolderView>

</LinearLayout>